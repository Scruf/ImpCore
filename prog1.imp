;;Egor Kozitski 
;; Time spent on assignment: 32 hours 
;; Collaborators: 
(define prime?helper (n divider)
	(if (= (mod n divider) 0)
		0	; false
		(if (> (* divider divider) n)
			1	; true if divider > sqrt(n) --> speeds up processing
			(prime?helper n (+ divider 1)))))

(define abs (n) (if (< n 0) (* -1 n) n))
(define min (a b) (if (< a b) a b))
(define max (a b) (if (> a b) a b))
(define gcd (m n)
  (if (or (< m 0) (< n 0))
      (gcd (max m (* -1 m)) (max n (* -1 n)))
      (if (= n 0)
          m
          (gcd n (mod m n)))))


;;Exercise 4
;; DEFINE sigma HERE
(define sigma (m n)
 (if (>= m n)
		m
	(+ m (sigma (+ m 1) n))))
(check-expect (sigma   0  5) 15)
(check-expect (sigma   0 10) 55)
(check-expect (sigma   5  5) 5)
(check-expect (sigma   5 10) 45)
(check-expect (sigma   5 15) 110)
(check-expect (sigma  -5  0) -15)
(check-expect (sigma -10  0) -55)
(check-expect (sigma  -5 -5) -5)
(check-expect (sigma -10 -5) -45)
(check-expect (sigma -15 -5) -110)
;; Exercise 5a
;; DEFINE exp HERE
(define exp(m n)
	(if (= n 0)
		1
	(* m (exp m (- n 1)))))
;; Exercise 5b
;; DEFINE log HERE
(define log (b m)
	(if (> b m)
		0
	(+ 1 (log b (/ m b)))))
(check-expect (exp 0  1) 0)
(check-expect (exp 0  5) 0)
(check-expect (exp 0 10) 0)
(check-expect (exp 2  0) 1)
(check-expect (exp 2  5) 32)
(check-expect (exp 2 10) 1024)
(check-expect (exp 2 15) 32768)
(check-expect (exp 5  0) 1)
(check-expect (exp 5  5) 3125)
(check-expect (exp 5 10) 9765625)
(check-expect (exp 5 15) 452807053)
(check-expect (log 2     1) 0)
(check-expect (log 2     2) 1)
(check-expect (log 2     3) 1)
(check-expect (log 2     4) 2)
(check-expect (log 2     5) 2)
(check-expect (log 2     6) 2)
(check-expect (log 2     7) 2)
(check-expect (log 2     8) 3)
(check-expect (log 2     9) 3)
(check-expect (log 2    10) 3)
(check-expect (log 2   127) 6)
(check-expect (log 2   128) 7)
(check-expect (log 2   129) 7)
(check-expect (log 2  1023) 9)
(check-expect (log 2  1024) 10)
(check-expect (log 2  1025) 10)
(check-expect (log 3     1) 0)
(check-expect (log 3     2) 0)
(check-expect (log 3     3) 1)
(check-expect (log 3     4) 1)
(check-expect (log 3     5) 1)
(check-expect (log 3     6) 1)
(check-expect (log 3     7) 1)
(check-expect (log 3     8) 1)
(check-expect (log 3     9) 2)
(check-expect (log 3    10) 2)
(check-expect (log 3  6560) 7)
(check-expect (log 3  6561) 8)
(check-expect (log 3  6562) 8)
(check-expect (log 3 59048) 9)
(check-expect (log 3 59049) 10)
(check-expect (log 3 59050) 10)
(check-expect (log 4 59050) 7)
(check-expect (log 5 59050) 6)
(check-expect (log 6 59050) 6)
(check-expect (log 7 59050) 5)
(check-expect (log 8 59050) 5)
(check-expect (log 9 59050) 5)
;; Exercise 6
;; DEFINE choose HERE
(define choose (n k) 
	(if (= k 0)
		1
		(if (= k n)
			1
			(+ (choose (- n 1) k) (choose (- n 1) (- k 1))))))


(check-expect (choose  0  0) 1)
(check-expect (choose  2  0) 1)
(check-expect (choose  2  1) 2)
(check-expect (choose  2  2) 1)
(check-expect (choose 10  0) 1)
(check-expect (choose 10  2) 45)
(check-expect (choose 10  4) 210)
(check-expect (choose 10  5) 252)
(check-expect (choose 10  6) 210)
(check-expect (choose 10  8) 45)
(check-expect (choose 10 10) 1)
(check-expect (choose 20  0) 1)
(check-expect (choose 20  4) 4845)
(check-expect (choose 20  9) 167960)
(check-expect (choose 20 10) 184756)
(check-expect (choose 20 11) 167960)
(check-expect (choose 20 16) 4845)
(check-expect (choose 20 20) 1)

;; Exercise 7
;; DEFINE fib HERE
(define fib (n)
	(if (= n 0)	
		0
		(if (= n 1)
			1
			(+ (fib (- n 2)) (fib (- n 1))))))	; by definition
(check-expect (fib  0) 0)
(check-expect (fib  1) 1)
(check-expect (fib  2) 1)
(check-expect (fib  3) 2)
(check-expect (fib  4) 3)
(check-expect (fib  5) 5)
(check-expect (fib 10) 55)
(check-expect (fib 15) 610)
(check-expect (fib 20) 6765)
(check-expect (fib 25) 75025)

;; Exercise 8a
;; DEFINE prime? HEREi
(define prime? (n) 
	(if (< n 2)
		0	
		(if (= n 2)
			1	
			(prime?helper n 2))))	
(check-expect (prime?    2) 1)
(check-expect (prime?    3) 1)
(check-expect (prime?    4) 0)
(check-expect (prime?    5) 1)
(check-expect (prime?    6) 0)
(check-expect (prime?    7) 1)
(check-expect (prime?    8) 0)
(check-expect (prime?    9) 0)
(check-expect (prime?   10) 0)
(check-expect (prime?   11) 1)
(check-expect (prime?   12) 0)
(check-expect (prime?   13) 1)
(check-expect (prime?   14) 0)
(check-expect (prime? 1008) 0)
(check-expect (prime? 1009) 1)
(check-expect (prime? 1010) 0)
(check-expect (prime? 1011) 0)
(check-expect (prime? 1012) 0)
(check-expect (prime? 1013) 1)
(check-expect (prime? 1014) 0)
;; Exercise 8b
;; DEFINE nthprime HERE
(define nth_prime_helper (number n)
	(if (prime? number)
		(if (= n 1)
			number
			(nth_prime_helper (+ number 2) (- n 1)))
		(nth_prime_helper (+ number 2) n)))
(define nthprime(n)
	(if (< n 0)
		0
	(if (= n 1)
		2
		(nth_prime_helper 3 (- n 1)))))
(check-expect (nthprime  1) 2)
(check-expect (nthprime  2) 3)
(check-expect (nthprime  3) 5)
(check-expect (nthprime  4) 7)
(check-expect (nthprime  5) 11)
(check-expect (nthprime  6) 13)
(check-expect (nthprime  7) 17)
(check-expect (nthprime  8) 19)
(check-expect (nthprime  9) 23)
i(check-expect (nthprime 10) 29)
(check-expect (nthprime 20) 71)
(check-expect (nthprime 30) 113)
(check-expect (nthprime 40) 173)
(check-expect (nthprime 50) 229)
(check-expect (nthprime 75) 379)
;; Exercise 8c
;; DEFINE sumprimes HERE
(define sumprimes (n)
	(if (< n 1) 
		0
	(+ (nthprime n) (sumprimes (- n 1)))))
(check-expect (sumprimes  1) 2)
(check-expect (sumprimes  2) 5)
(check-expect (sumprimes  3) 10)
(check-expect (sumprimes  4) 17)
(check-expect (sumprimes  5) 28)
(check-expect (sumprimes  6) 41)
(check-expect (sumprimes  7) 58)
(check-expect (sumprimes  8) 77)
(check-expect (sumprimes  9) 100)
(check-expect (sumprimes 10) 129)
(check-expect (sumprimes 20) 639)
(check-expect (sumprimes 30) 1593)
(check-expect (sumprimes 40) 3087)
(check-expect (sumprimes 50) 5117)
;; Exercise 8d
;; DEFINE relprime? HERE
(define relprime? (m n)
	(if (=(gcd m n) 1)
		1
	0))
(check-expect (relprime?    2    2) 0)
(check-expect (relprime?    2    3) 1)
(check-expect (relprime?    2    4) 0)
(check-expect (relprime?    2    5) 1)
(check-expect (relprime?    2    6) 0)
(check-expect (relprime?    3    2) 1)
(check-expect (relprime?    3    3) 0)
(check-expect (relprime?    3    4) 1)
(check-expect (relprime?    3    5) 1)
(check-expect (relprime?    3    6) 0)
(check-expect (relprime?    4    2) 0)
(check-expect (relprime?    4    3) 1)
(check-expect (relprime?    4    4) 0)
(check-expect (relprime?    4    5) 1)
(check-expect (relprime?    4    6) 0)
(check-expect (relprime?    5    2) 1)
(check-expect (relprime?    5    3) 1)
(check-expect (relprime?    5    4) 1)
(check-expect (relprime?    5    5) 0)
(check-expect (relprime?    5    6) 1)
(check-expect (relprime?    6    2) 0)
(check-expect (relprime?    6    3) 0)
(check-expect (relprime?    6    4) 0)
(check-expect (relprime?    6    5) 1)
(check-expect (relprime?    6    6) 0)
(check-expect (relprime?   18  712) 0)
(check-expect (relprime?  514  793) 1)
(check-expect (relprime?    8  819) 1)
(check-expect (relprime?  813  286) 1)
(check-expect (relprime?  759  824) 1)
(check-expect (relprime?  863  133) 1)
(check-expect (relprime?  255  695) 0)
(check-expect (relprime?  254  726) 0)
(check-expect (relprime?  708  102) 0)
(check-expect (relprime?  781   87) 1)
(check-expect (relprime?  510  248) 0)
(check-expect (relprime?  445  220) 0)
(check-expect (relprime?  572  977) 1)
(check-expect (relprime?  983  736) 1)
(check-expect (relprime?  376  875) 1)
(check-expect (relprime?  901  876) 1)
(check-expect (relprime?  879  675) 0)
(check-expect (relprime?  302  377) 1)
(check-expect (relprime?  852  569) 1)
(check-expect (relprime?  726  408) 0)
(check-expect (relprime?  617  289) 1)
;; Exercise 9a
;; DEFINE given-positive-all-fours? HERE
(define given-positive-all-fours? (n)
	(if (= n 4)
		1
	(if (< n 10)
		0
	(if (!= (mod n 10) 4)
		0
	(given-positive-all-fours? (/ n 10))))))
;; Exercise 9b
;; DEFINE all-fours? HERE
(define all-fours?(n)
	(if (= n 4)
		1
	(if (< n 10)
		0
	(if (!= (mod n 10) 4)
		0
	(all-fours? (/ n 10))))))
(check-expect (all-fours? -5) 0)
(check-expect (all-fours? -4) 1)
(check-expect (all-fours? -3) 0)
(check-expect (all-fours? -2) 0)
(check-expect (all-fours? -1) 0)
(check-expect (all-fours? 0) 0)
(check-expect (all-fours? 1) 0)
(check-expect (all-fours? 2) 0)
(check-expect (all-fours? 3) 0)
(check-expect (all-fours? 4) 1)
(check-expect (all-fours? 5) 0)
(check-expect (all-fours? -15) 0)
(check-expect (all-fours? -14) 0)
(check-expect (all-fours? -13) 0)
(check-expect (all-fours? -12) 0)
(check-expect (all-fours? -11) 0)
(check-expect (all-fours? 10) 0)
(check-expect (all-fours? 11) 0)
(check-expect (all-fours? 12) 0)
(check-expect (all-fours? 13) 0)
(check-expect (all-fours? 14) 0)
(check-expect (all-fours? 15) 0)
(check-expect (all-fours? -45) 0)
(check-expect (all-fours? -44) 1)
(check-expect (all-fours? -43) 0)
(check-expect (all-fours? -42) 0)
(check-expect (all-fours? -41) 0)
(check-expect (all-fours? 40) 0)
(check-expect (all-fours? 41) 0)
(check-expect (all-fours? 42) 0)
(check-expect (all-fours? 43) 0)
(check-expect (all-fours? 44) 1)
(check-expect (all-fours? 45) 0)
(check-expect (all-fours? -444) 1)
(check-expect (all-fours? -443) 0)
(check-expect (all-fours? -4444) 1)
(check-expect (all-fours? -4443) 0)
(check-expect (all-fours? -44444) 1)
(check-expect (all-fours? -44443) 0)
(check-expect (all-fours? 444) 1)
(check-expect (all-fours? 443) 0)
(check-expect (all-fours? 4444) 1)
(check-expect (all-fours? 4443) 0)
(check-expect (all-fours? 44444) 1)
(check-expect (all-fours? 44443) 0)
;; Exercise 9c
;; DEFINE all-one-digit? HERE
(define all-one-digit?(n)
	(if (< n 0)
		(all-one-digit? (- 0 n))
	(if (< n 10)
		1
	(if (!= (mod n 10)
		(mod (/ n 10) 10))
		0
	(all-one-digit? (/ n 10))))))
;; Exercise 9d
;; DEFINE increasing-digits? HERE
(define increasing-digits? (n)
    (if (< n 0)
	 (increasing-digits? (- 0 n))
      (if (< n 10)
	 1
        (if (<= (mod n 10)
	 (mod (/ n 10) 10)) 0 
         (increasing-digits? (/ n 10))))))
;; Exercise 10
;; DEFINE binary HERE
(define binary (m)
	(if (< m 0)
		(* -1(binary (* -1  m)))
	(if (= m 0)
		0
	(+ (exp 10 (log 2 m))(binary (-m (exp 2 (log 2 m))))))))
